{"version":3,"sources":["types.js","components/ControlPanel/ControlPanel.jsx","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","api/api.js","index.js"],"names":["PropTypes","shape","id","number","isRequired","title","string","completed","bool","defaultProps","name","email","phone","ControlPanel","searchText","status","updateTodos","className","type","value","onChange","e","target","TodoList","state","key","setState","this","props","selectedId","selectionChanged","todoCompleted","filteredTodos","map","todo","classnames","checked","onClick","readOnly","userId","newStatusTodos","todos","filter","length","includes","createTodos","React","Component","CurrentUser","user","deselectUser","App","userInfo","selectedUserId","selectUser","newUserId","updateUserInfo","completeTodo","todoId","prevState","clearSelection","a","fetch","then","result","json","todosFromServer","data","info","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4fb1c564.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const TodoType = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string,\n  completed: PropTypes.bool,\n});\n\nTodoType.defaultProps = {\n  title: '',\n  completed: false,\n};\n\nexport const UserType = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ControlPanel.scss';\n\nexport const ControlPanel = ({ searchText, status, updateTodos }) => (\n  <div className=\"ControlPanel__controls\">\n    <input\n      className=\"ControlPanel__input\"\n      type=\"text\"\n      value={searchText}\n      onChange={(e) => {\n        updateTodos('searchText', e.target.value);\n      }}\n    />\n    <select\n      name=\"filter\"\n      id=\"filter\"\n      className=\"ControlPanel__select\"\n      value={status}\n      onChange={(e) => {\n        updateTodos('status', e.target.value);\n      }}\n    >\n      <option value=\"all\">All</option>\n      <option value=\"active\">Active</option>\n      <option value=\"completed\">Completed</option>\n    </select>\n  </div>\n);\n\nControlPanel.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  status: PropTypes.string.isRequired,\n  updateTodos: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { TodoType } from '../../types';\nimport { ControlPanel } from '../ControlPanel';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    searchText: '',\n    status: 'all',\n  }\n\n  updateTodos = (key, value) => {\n    this.setState({\n      [key]: value,\n    });\n  }\n\n  createTodos() {\n    const { selectedId, selectionChanged, todoCompleted } = this.props;\n    const filtered = this.filteredTodos();\n\n    return filtered.map(todo => (\n      <li\n        key={todo.id}\n        className={classnames(\n          'TodoList__item',\n          { 'TodoList__item--checked': todo.completed },\n          { 'TodoList__item--unchecked': !todo.completed },\n        )}\n      >\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={todo.completed}\n            onClick={() => todoCompleted(todo.id)}\n            readOnly\n          />\n          <p>{todo.title}</p>\n        </label>\n\n        <button\n          className={classnames(\n            'TodoList__user-button',\n            { 'TodoList__user-button--selected': todo.userId === selectedId },\n            'button',\n          )}\n          onClick={() => {\n            selectionChanged(todo.userId);\n          }}\n          type=\"button\"\n        >\n          User&nbsp;#\n          {todo.userId}\n        </button>\n      </li>\n    ));\n  }\n\n  filteredTodos() {\n    const { status, searchText } = this.state;\n    const { todos: initialTodos } = this.props;\n\n    let newStatusTodos = initialTodos;\n\n    if (status !== 'all') {\n      newStatusTodos = newStatusTodos\n        .filter(todo => todo.completed === (status === 'completed'));\n    }\n\n    if (searchText.length) {\n      newStatusTodos = newStatusTodos\n        .filter(todo => todo.title && todo.title.includes(searchText));\n    }\n\n    return newStatusTodos;\n  }\n\n  render() {\n    const { searchText, status } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>\n          Todos:\n        </h2>\n        <ControlPanel\n          updateTodos={this.updateTodos}\n          searchText={searchText}\n          status={status}\n        />\n        <ul>\n          {this.createTodos()}\n        </ul>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(TodoType).isRequired,\n  selectedId: PropTypes.number.isRequired,\n  selectionChanged: PropTypes.func.isRequired,\n  todoCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { UserType } from '../../types';\nimport './CurrentUser.scss';\n\nexport const CurrentUser = ({ user, deselectUser }) => {\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {user.id}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n      <button\n        type=\"button\"\n        className=\"CurrentUser__clear\"\n        onClick={deselectUser}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n\nCurrentUser.propTypes = {\n  user: UserType.isRequired,\n  deselectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos, getUser } from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    userInfo: null,\n    selectedUserId: -1,\n  };\n\n  async componentDidMount() {\n    const todosFromServer = await getTodos();\n\n    this.setState({ todos: todosFromServer.data });\n  }\n\n  selectUser = (newUserId) => {\n    this.setState((state) => {\n      if (state.selectedUserId !== newUserId) {\n        this.updateUserInfo(newUserId);\n\n        return { selectedUserId: newUserId };\n      }\n\n      return state;\n    });\n  }\n\n  completeTodo = (todoId) => {\n    this.setState((prevState) => {\n      const updatedTodos = prevState.todos\n        .map(todo => ((todo.id !== todoId)\n          ? { ...todo }\n          : {\n            ...todo, completed: !todo.completed,\n          }));\n\n      return {\n        todos: updatedTodos,\n      };\n    });\n  }\n\n  clearSelection = () => {\n    this.setState(\n      {\n        selectedUserId: -1,\n        userInfo: null,\n      },\n    );\n  }\n\n  async updateUserInfo(newUserId) {\n    if (newUserId >= 0) {\n      const info = await getUser(newUserId);\n\n      this.setState({\n        userInfo: info ? info.data : info,\n      });\n    }\n  }\n\n  render() {\n    const { todos, userInfo } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedId={userInfo ? userInfo.id : 0}\n            selectionChanged={this.selectUser}\n            todoCompleted={this.completeTodo}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {userInfo ? (\n              <CurrentUser user={userInfo} deselectUser={this.clearSelection} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const BASE_TODO_URL = 'https://mate-api.herokuapp.com/todos';\nconst BASE_USER_URL = 'https://mate-api.herokuapp.com/users/';\n\nexport function getTodos() {\n  return fetch(BASE_TODO_URL)\n    .then(result => result.json());\n}\n\nexport function getUser(userId) {\n  return fetch(`${BASE_USER_URL}/${userId}`)\n    .then(result => result.json());\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}